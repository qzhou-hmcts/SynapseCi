# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  sqlDwPath: 'synapse'
  azure.subscription.endpoint: 'DTS-SHAREDSERVICES-TEST'
  keyvault.name: 'mi-vault-test'
  sqlDwDatabaseName: 'mi-datawarehouse-db-test'
stages:
- stage: 'validate'
  displayName: 'Validate project'
  # condition: and(always(), eq(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job: 'validate_sql_packages'
    displayName: 'Validate sql project'
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: VSTest@2
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(sqlDwPath)/bin/$(buildConfiguration)/synapse.dacpac'
        ArtifactName: 'sql_dw_dacpac'
      displayName: 'Publish SQL DACPAC'  
  
- stage: 'Deploy'
  displayName: 'Deploy project'
  jobs:
  - deployment: deploy_azuresqldw
    displayName: 'Deploy to AzureSQLDW'
    dependsOn: validate_sql_packages
    condition: succeeded()
    pool:
      vmImage: 'windows-latest'
    variables:
      sqlProjName: ddo_azuresqldw_dw
    environment: $(environment)
    strategy:
      runOnce:
        deploy:
          steps:
          - template: ./pipeline/vault-secrets.yaml
            parameters: 
              azureSubscriptionEndpoint: $(azure.subscription.endpoint)
              keyVaultName: $(keyvault.name)
              secretsFilter: '*'
          - task: DownloadBuildArtifacts@0
            inputs:
              downloadPath: $(System.ArtifactsDirectory)
              artifactName: 'sql_dw_dacpac'
          - task: CmdLine@2
            inputs:
              script: 'dir /s $(System.ArtifactsDirectory)' 
          # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/sql-azure-dacpac-deployment?view=azure-devops
          - task: SqlAzureDacpacDeployment@1
            inputs:
              azureSubscription: $(azure.subscription.endpoint)
              AuthenticationType: 'server'
              ServerName: $(sqlsrvrName).database.windows.net
              DatabaseName: $(sqlDwDatabaseName)
              SqlUsername: '$(mi-datawarehouse-server-admin-user)'
              SqlPassword: '$(mi-datawarehouse-server-admin-password)'
              deployType: 'DacpacTask'
              DacpacFile: '$(System.ArtifactsDirectory)\sql_dw_dacpac\synapse.dacpac' 
              AdditionalArguments: '/Variables:SqlDwDatabaseName=$(sqlDwDatabaseName) /Variables:PipelinePassword=$(pipelinePassword)'
            displayName: 'Azure SQL Dacpac'

 